Modification of teh cat language

* Allow ~testname as a test, the effect is to negate test outcome,
  e.g. ~acyclic is true for cyclic relations.
        
  Hence test syntax now is
   test_name: acyclic|~acyclic|empty|~empty|irreflexive|~irreflexive
   test: expr (as name)?

* New 'flag' construct, test syntax is
   new_test:
   | test --> as before
   | undefined_unless test -> as before
   | flag test ->
      the test must have a name, and this name is execution is
      recorded as having flagged the name, when the test evaluates to true.
      *Notice* as in the  undefined_unless case, flagged tests
      never abort model execution.
        
* New -showflag <string> for herd7

Thus get pictures of say racy execution:
CAT:
let races = ...
flag ~empty races as racy

UNIX:
herd7 ... -showflag racy -gv

* Similar -throughflag <string> select excutions with flag <string>
 will enable approximate comparison of flagged execution by comparing
 flagged outcomes.

* when clause for toplevel let rec.
  A toplevel let rec declaration cam be complemented by a
  when [~](acyclic|empty|irreflexive) clause.

  The semantics is as follows: the check is performed at every fixpoint
  iteration step. If the test fails, the execution is interupted, as
  with ordinary checks. The idea is optimisation, consider:

  let rec S =
    ...
  | S;S
  when acyclic S

 is equivalent to

  let rec S =
    ...
  | S;S

  irreflexive S

  but it should be faster (up to test cost), as fixpoint iteration is
  interupted.

* Name procedure calls (call ... [as name]). behave as checks as regard
  skipping.

* New if e1 = e2 then e3 else e4 expression construct. Semantics is as
  expected. Can be used to build maps as functions.

* Added tuples tuple expressions are () and (e1,...,eN) N >= 2
  Also added bindings for destructuring tuples:
  (x1,..,xN) = e and tuple formal arguments
 

