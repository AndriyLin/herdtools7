"Experimental model, with atomics"

include "cos.cat"

(* Uniproc *)
acyclic po-loc | rf | fr | co

(* Atomic *)
empty atom & (fre;coe) as atomic

(* Utilities *)
let dd = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)
let addrpo = addr;po
let aa = po & (A * A)

(*******)
(* ppo *)
(*******)
let WW = W * W
let RM = R * M
let RR = R * R
let WR = W * R


(* Initial value *)
let ci0 = ctrlisync | detour | aa & RR | aa & WR
let ii0 = dd | rfi | rdw
let cc0 = dd | po-loc | ctrl | addrpo | aa
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
include "ppo.cat"


(**********)
(* fences *)
(**********)

(* Power *)
let lwsync_eff = lwsync & RM | lwsync & WW
let eieio_eff = eieio & WW


(* ARM *)
let dmb.st_eff=dmb.st & WW
let dsb.st_eff=dsb.st & WW

(* Common, all arm barriers are strong *)
let strong = sync|dmb|dsb|dmb.st_eff|dsb.st_eff
let light = lwsync_eff|eieio_eff

let fence = strong|light


(* happens before *)
let hb = ppo | fence | rfe
acyclic hb as thinair

(* prop *)
let hbstar = hb*
let propbase = (fence|(rfe;fence));hbstar

let chapo = rfe|fre|coe|(fre;rfe)|(coe;rfe)

let prop = (propbase & WW)| (chapo? ; propbase*; strong; hbstar)

acyclic co|prop as propagation
irreflexive fre;prop;hbstar as causality

